{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst selector = document.querySelector('#datetime-picker');\nconst dataStart = document.querySelector('[data-start]');\nlet userSelectedDate = 0;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    const currentDate = new Date();\n    if (userSelectedDate < currentDate) {\n      iziToast.warning({\n        color: 'red',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n      dataStart.setAttribute('disabled', true);\n    } else {\n      dataStart.removeAttribute('disabled');\n    }\n  },\n};\n\nflatpickr(selector, options);\ndataStart.addEventListener('click', startTimer);\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n/*\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n*/\n\nfunction startTimer() {\n  dataStart.setAttribute('disabled', true);\n  selector.setAttribute('disabled', true);\n\n  let msDifference = userSelectedDate - new Date();\n\n  const intervalId = setInterval(() => {\n    let { days, hours, minutes, seconds } = convertMs(msDifference);\n    document.querySelector('[data-days]').textContent = addLeadingZero(days);\n    document.querySelector('[data-hours]').textContent = addLeadingZero(hours);\n    document.querySelector('[data-minutes]').textContent =\n      addLeadingZero(minutes);\n    document.querySelector('[data-seconds]').textContent =\n      addLeadingZero(seconds);\n    if (days === 0 && hours === 0 && minutes === 0 && seconds === 0) {\n      clearInterval(intervalId);\n    }\n    msDifference -= 1000;\n  }, 1000);\n}\n\nfunction addLeadingZero(value) {\n  return value < 10 ? '0' + value : value;\n}\n"],"names":["selector","dataStart","userSelectedDate","options","selectedDates","iziToast","flatpickr","startTimer","convertMs","ms","days","hours","minutes","seconds","msDifference","intervalId","addLeadingZero","value"],"mappings":"sGAKA,MAAMA,EAAW,SAAS,cAAc,kBAAkB,EACpDC,EAAY,SAAS,cAAc,cAAc,EACvD,IAAIC,EAAmB,EAEvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAmBE,EAAc,CAAC,EAE9BF,EADgB,IAAI,MAEtBG,EAAS,QAAQ,CACf,MAAO,MACP,QAAS,qCACT,SAAU,UAClB,CAAO,EACDJ,EAAU,aAAa,WAAY,EAAI,GAEvCA,EAAU,gBAAgB,UAAU,CAEvC,CACH,EAEAK,EAAUN,EAAUG,CAAO,EAC3BF,EAAU,iBAAiB,QAASM,CAAU,EAE9C,SAASC,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAOA,SAASN,GAAa,CACpBN,EAAU,aAAa,WAAY,EAAI,EACvCD,EAAS,aAAa,WAAY,EAAI,EAEtC,IAAIc,EAAeZ,EAAmB,IAAI,KAE1C,MAAMa,EAAa,YAAY,IAAM,CACnC,GAAI,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUM,CAAY,EAC9D,SAAS,cAAc,aAAa,EAAE,YAAcE,EAAeN,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAcM,EAAeL,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YACvCK,EAAeJ,CAAO,EACxB,SAAS,cAAc,gBAAgB,EAAE,YACvCI,EAAeH,CAAO,EACpBH,IAAS,GAAKC,IAAU,GAAKC,IAAY,GAAKC,IAAY,GAC5D,cAAcE,CAAU,EAE1BD,GAAgB,GACjB,EAAE,GAAI,CACT,CAEA,SAASE,EAAeC,EAAO,CAC7B,OAAOA,EAAQ,GAAK,IAAMA,EAAQA,CACpC"}